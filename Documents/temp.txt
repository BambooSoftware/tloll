#############################################################
#This file holds the code set up for the FPS cap on the loop#
#############################################################
// TODO(map) : Read up about the FPS and how it's being set here.
	// TODO(map) : Implement enemies walking across screen.
	long lastTime = System.nanoTime();
	double delta = 0.0;
	double ns = 1000000000.0 / 30.0;
	long timer = System.currentTimeMillis();
	int updates = 0;
	int frames = 0;
	
	while ( !glfwWindowShouldClose(tloll.windowId) ) {
	    long now = System.nanoTime();
	    delta += (now - lastTime) / ns;
	    lastTime = now;
	    if (delta >= 1.0) {
		updates++;
		delta--;
	    
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // Clear the frame buffer.
	    
		// Do game logic in here.
		//tloll.changeBackground(background);
		glClearColor(background.getRed(), background.getGreen(), background.getBlue(), background.getAlpha());
		tloll.changeBackground(background);
		tloll.bindKeys(player);

		// Set triangle color.
		glColor3f(player.getRed(), player.getGreen(), player.getBlue());
		tloll.drawTriangle(player);
		glColor3f(square.getRed(), square.getGreen(), square.getBlue());
		tloll.drawSquare(square);
		System.out.println("Square RGB = " + square.getRed() + "," + square.getGreen() + "," + square.getBlue());
		glColor3f(triangle.getRed(), triangle.getGreen(), triangle.getBlue());
		tloll.moveTriangle(triangle);
		tloll.moveSquare(square);

		glfwSwapBuffers(tloll.windowId); // Swaps buffers that will be drawn.
	    
		glfwPollEvents(); // Continuosuly polls.
		//glfwWaitEvents(); // Update only on event. TODO(map) : Good for debugging and running frame by frame.
	    }
	    frames++;
	    if (System.currentTimeMillis() - timer > 1000) {
		timer += 1000;
		System.out.println(updates + " ups, " + frames + " fps");
		updates = 0;
		frames = 0;
	    }
	}
